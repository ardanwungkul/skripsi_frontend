import{i,j as r}from"./index-3f1fe31d.js";const l=()=>r.get("/sanctum/csrf-cookie"),n=i({id:"order",state:()=>({orders:[],loading:!1,error:null,order:{},create:{}}),getters:{allData:a=>a.orders,isLoading:a=>a.loading,getError:a=>a.error},actions:{async getData(){this.loading=!0;try{const a=await r.get("/api/order").then(e=>{this.orders=e.data})}catch(a){this.error=a}finally{this.loading=!1}},async getDataCreate(){this.loading=!0;try{const a=await r.get("/api/order/create").then(e=>{this.create=e.data})}catch(a){this.error=a}finally{this.loading=!1}},async getDataById(a){this.loading=!0;try{const e=await r.get(`/api/order/${a}`);e.status===200?this.order=e.data:this.order={}}catch(e){e.response&&e.response.status===404?this.order={}:this.error=e}finally{this.loading=!1}},async getDataByCode(a){this.loading=!0;try{const e=await r.get(`/api/order-by-code/${a}`);e.status===200?this.order=e.data:this.order={}}catch(e){e.response&&e.response.status===404?this.order={}:this.error=e}finally{this.loading=!1}},async getDataByUserId(a){this.loading=!0;try{const e=await r.get(`/api/order-by-user-id/${a}`);e.status===200&&(this.orders=e.data)}catch(e){e.response&&e.response.status===404?this.orders=[]:this.error=e}finally{this.loading=!1}},async addData(a,e,t){await l(),t.value=!0,r.post("/api/order",a).then(s=>{t.value=!1,this.router.push({name:"user.order.checkout",params:{code:s.data.order_code}})}).catch(s=>{if(console.log(s),s.response.status!==422)throw s;e.value=Object.values(s.response.data.errors).flat(),t.value=!1})},async process(a,e){await l(),e.value=!0,r.post("/api/order-process",a).then(t=>{e.value=!1;const s=this.orders.findIndex(o=>o.id===t.data.id);s!==-1&&(this.orders[s]=t.data)}).catch(t=>{if(console.log(t),t.response.status!==422)throw t;setErrors.value=Object.values(t.response.data.errors).flat(),e.value=!1})},async payment(a,e){await l(),e.value=!0,r.post("/api/payment",a).then(t=>{e.value=!1,console.log(t),window.location=t.data.invoice_url}).catch(t=>{if(console.log(t),t.response.status!==422)throw t;setErrors.value=Object.values(t.response.data.errors).flat(),e.value=!1})},async editData(a,e,t,s){await l(),t.value=!0,r.post(`/api/order/${s}`,a).then(o=>{this.getData(),t.value=!1}).catch(o=>{if(console.log(o),o.response.status!==422)throw o;e.value=Object.values(o.response.data.errors).flat(),t.value=!1})},async deleteData(a,e){await l(),e.value=!0;try{const t=await r.delete(`/api/order/${a}`);this.orders=this.orders.filter(s=>s.id!==a),e.value=!1}catch(t){this.error=t,console.log(this.error),e.value=!1}finally{e.value=!1}}}});export{n as o};
