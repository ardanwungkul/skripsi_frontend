import{i as r,j as o}from"./index-3f1fe31d.js";const i=()=>o.get("/sanctum/csrf-cookie"),u=r({id:"todolist",state:()=>({create:[],edit:[],todolists:[],loading:!1,error:null,todolist:{},index:[]}),getters:{allData:a=>a.todolists,isLoading:a=>a.loading,getError:a=>a.error},actions:{async getData(){this.loading=!0;try{const a=await o.get("/api/todolist").then(t=>{this.todolists=t.data})}catch(a){this.error=a}finally{this.loading=!1}},async getDataByUserId(a){this.loading=!0;try{const t=await o.get(`/api/todolist/user/${a}`).then(s=>{this.todolists=s.data})}catch(t){this.error=t}finally{this.loading=!1}},async getDataIndex(){this.loading=!0;try{const a=await o.get("/api/todolist/").then(t=>{this.index=t.data})}catch(a){this.error=a}finally{this.loading=!1}},async getDataCreate(){this.loading=!0;try{const a=await o.get("/api/todolist/create").then(t=>{this.create=t.data})}catch(a){this.error=a}finally{this.loading=!1}},async getDataEdit(a){this.loading=!0;try{const t=await o.get(`/api/todolist/${a}/edit`).then(s=>{this.edit=s.data})}catch(t){this.error=t}finally{this.loading=!1}},async getDataById(a){this.loading=!0;try{const t=await o.get(`/api/todolist/${a}`);t.status===200?this.todolist=t.data:this.todolist={}}catch(t){t.response&&t.response.status===404?this.todolist={}:this.error=t}finally{this.loading=!1}},async addData(a,t,s){await i(),s.value=!0,o.post("/api/todolist",a).then(e=>{s.value=!1,this.todolists.push(e.data),console.log(e)}).catch(e=>{if(console.log(e),e.response.status==500&&(t.value=Object.values([e.response.data.message])),e.response.status!==422)throw e;t.value=Object.values(e.response.data.errors).flat(),s.value=!1})},async editData(a,t,s,e){await i(),s.value=!0,o.post(`/api/todolist/${e}`,a).then(l=>{s.value=!1,this.router.push({name:"todolist.index"}),console.log(l)}).catch(l=>{if(console.log(l),l.response.status!==422)throw l;t.value=Object.values(l.response.data.errors).flat(),s.value=!1})},async submitTodo(a,t,s){await i(),s.value=!0,o.post("/api/todolist-submit/",a).then(e=>{s.value=!1,e.data.forEach(l=>{const n=this.todolists.findIndex(d=>d.id===l.id);n!==-1?this.todolists[n]=l:this.todolists.push(l)})}).catch(e=>{if(console.log(e),e.response.status!==422)throw e;t.value=Object.values(e.response.data.errors).flat(),s.value=!1})},async confirmOrder(a,t,s){await i(),s.value=!0,o.post("/api/todolist-confirm-order/",a).then(e=>{s.value=!1,this.todolists=this.todolists.filter(l=>l.id!==parseInt(e.data)),console.log(e)}).catch(e=>{if(console.log(e),e.response.status!==422)throw e;t.value=Object.values(e.response.data.errors).flat(),s.value=!1})},async deleteData(a,t){await i(),t.value=!0;try{const s=await o.delete(`/api/todolist/${a}`);this.todolists=this.todolists.filter(e=>e.id!==a),t.value=!1}catch(s){this.error=s,console.log(this.error),t.value=!1}finally{t.value=!1}},async editStatus(a,t){await i(),t.value=!0,o.post("/api/todolist/change-status/",a).then(s=>{t.value=!1,console.log(s)}).catch(s=>{if(console.log(s),s.response.status!==422)throw s;setErrors.value=Object.values(s.response.data.errors).flat(),t.value=!1})},async editNote(a,t){await i(),t.value=!0,o.post("/api/todolist/change-note/",a).then(s=>{t.value=!1}).catch(s=>{if(console.log(s),s.response.status!==422)throw s;setErrors.value=Object.values(s.response.data.errors).flat(),t.value=!1})}}});export{u as t};
